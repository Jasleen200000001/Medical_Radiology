# -*- coding: utf-8 -*-
"""Brain Tumor Classification Using Deep Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1efA-bq10A2IZA1oyVvixS7VwuCF2opW0
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os, shutil
import cv2
import matplotlib.image as mpimg
import seaborn as sns
# %matplotlib inline
plt.style.use('ggplot')

from google.colab import drive
drive.mount('/content/drive')

# @title Default title text
import os

folder = '/content/drive/MyDrive/data/brain_tumor_dataset/no/'
count = 1

for filename in os.listdir(folder):
    source = os.path.join(folder, filename)
    destination = os.path.join(folder, 'N_' + str(count) + '.jpg')
    os.rename(source, destination)
    count += 1

print('NO', '\n', destination)

# @title Default title text
import os

folder = '/content/drive/MyDrive/data/brain_tumor_dataset/yes/'
count = 1

for filename in os.listdir(folder):
    source = os.path.join(folder, filename)
    destination = os.path.join(folder, 'Y_' + str(count) + '.jpg')
    os.rename(source, destination)
    count += 1

print('yes', '\n', destination)

"""EDA (Exploratory Dara Analysis)"""

listo = '/content/drive/MyDrive/data/brain_tumor_dataset/'
list_yes = os.listdir(listo+'yes/')
number_files_yes = len(list_yes)
print(number_files_yes)

list_no = os.listdir(listo+'no')
number_files_no = len(list_no)
print(number_files_no)

#plot
data ={'tumorus':number_files_yes,'non-tumorus':number_files_no}
typex = data.keys()
values = data.values()

fig = plt.figure(figsize=(5,7))

plt.bar(typex, values, color='red')

plt.xlabel('Data')
plt.ylabel('no of brain MRI images')
plt.title('count of brain tumor images')

"""Data Argumentaion"""

per_no=(number_files_no/(number_files_yes+ number_files_no))*100
per_yes=(number_files_yes/(number_files_yes+ number_files_no))*100
print(per_no,'% NO')
print(per_yes,'% Yes')

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Flatten, Dense, Dropout
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.optimizers import SGD, RMSprop, Adam
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau

def timing(sec_elapsed):
  h = int((sec_elapsed)/(60*60))
  m = int((sec_elapsed)/(60*60)/60)
  s = sec_elapsed%60
  return f'{h}:{m}:{s}'

def augmented_data(file_dir, n_generated_samples, save_to_dir):
    data_gen = ImageDataGenerator(rotation_range=10,
                      width_shift_range=0.1,
                      height_shift_range=0.1,
                      shear_range=0.1,
                      brightness_range=(0.3, 1.0),
                      horizontal_flip=True,
                      vertical_flip=True,
                      fill_mode='nearest')
    for filename in os.listdir(file_dir):
        image = cv2.imread(file_dir + '/' + filename)
        image = image.reshape((1,) + image.shape)
        save_prefix = 'aug_' + filename[:-4]
        i=0
        for batch in data_gen.flow(x = image, batch_size = 1, save_to_dir = save_to_dir, save_prefix = save_prefix, save_format = "jpg"):
            i+=1
            if i>n_generated_samples:
                break

import time

# Measure the start time
start_time = time.time()

# Paths to the original datasets
yes_path = '/content/drive/MyDrive/data/brain_tumor_dataset/yes/'
no_path = '/content/drive/MyDrive/data/brain_tumor_dataset/no/'

# Paths to save the augmented data
augmented_data_path = '/content/drive/MyDrive/data/augmented_data'

# Generate augmented data
augmented_data(file_dir = yes_path, n_generated_samples=6, save_to_dir=augmented_data_path+'/yes')
augmented_data(file_dir = no_path, n_generated_samples=9, save_to_dir=augmented_data_path+'/no')

# Measure the end time
end_time = time.time()

# Calculate and print the execution time
execution_time = end_time - start_time
print(f"Execution time: {execution_time} seconds")

def data_summary(main_path):
  yes_path = '/content/drive/MyDrive/data/augmented_data/yes/'
  no_path = '/content/drive/MyDrive/data/augmented_data/no/'

  m_pos = len(os.listdir(yes_path))
  m_neg = len(os.listdir(no_path))

  n = (m_pos + m_neg)
  pos_per = (m_pos*100)/n
  neg_per = (m_neg*100)/n

  print(f'number of sample', n)
  print(f'{m_pos}postive{pos_per}% , {m_neg}negative {neg_per}%')

data_summary(augmented_data_path)

listyes = '/content/drive/MyDrive/data/augmented_data/yes/'
number_files_yes = len(listyes)
print(number_files_yes)
listno = '/content/drive/MyDrive/data/augmented_data/no/'
number_files_no = len(listno)
print(number_files_no)

#plot
data ={'tumorus':number_files_yes,'non-tumorus':number_files_no}
typex = data.keys()
values = data.values()

fig = plt.figure(figsize=(5,7))

plt.bar(typex, values, color='red')

plt.xlabel('Data')
plt.ylabel('no of brain MRI images')
plt.title('count of brain tumor images')

from sre_constants import error
#data preprocessing
# convert BGR to Gray
# GaussianBlue
# thershold
# erode
# dilate
# find contours

def crop_brain_tumor(image, plot=False):
  gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  gray = cv2.GaussianBlur(gray, (5,5), 0)

  cv3.thershold(gray, 45,cv2.THRESH_BINARY)